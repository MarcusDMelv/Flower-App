# -*- coding: utf-8 -*-
"""FlowerPredictor.ipynb

Automatically generated by Colaboratory.


"""

import tensorflow as tf
import os

_URL = "https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz"
zip_file = tf.keras.utils.get_file(origin=_URL,fname='flower_photo.tgz',extract=True,cache_subdir="/content")
base_dir = os.path.join(os.path.dirname(zip_file), 'flower_photos')

IMAGE_SIZE = 224
BATCH_SIZE = 64

datagen = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale = 1./255,
    validation_split = 0.2
)
train_generator = datagen.flow_from_directory(
    base_dir,
    target_size = (IMAGE_SIZE,IMAGE_SIZE),
    batch_size = BATCH_SIZE,
    subset='training'
)
val_generator = datagen.flow_from_directory(
    base_dir,
    target_size = (IMAGE_SIZE,IMAGE_SIZE),
    batch_size = BATCH_SIZE,
    subset='validation'
)

print(train_generator.class_indices)
labels = '\n'.join(sorted(train_generator.class_indices.keys()))
labels
#save label file
with open('labels.txt', 'w') as f:
  f.write(labels)

IMG_SHAPE = (IMAGE_SIZE,IMAGE_SIZE,3)

base_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,
                                                include_top = False,
                                                weights = 'imagenet')

base_model.trainable = False

#Building the model
model = tf.keras.Sequential([
                             base_model,
                             tf.keras.layers.Conv2D(32,3,activation='relu'),
                             tf.keras.layers.Dropout(0.2),
                             tf.keras.layers.GlobalAvgPool2D(),
                             tf.keras.layers.Dense(5,activation='softmax')
                             
                             ])

# training the model
model.compile(optimizer=tf.keras.optimizers.Adam(),
             loss = "categorical_crossentropy",
             metrics=['accuracy'])

epochs = 5

history = model.fit(train_generator,
                    epochs = epochs,
                    validation_data = val_generator)

saved_model_dir = ''
tf.saved_model.save(model,saved_model_dir)

#convert saved model into tflite model
converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir)
tflite_model = converter.convert()
with open ('model.tflite','wb') as f:
  f.write(tflite_model)

# download created files
from google.colab import files
files.download('model.tflite')
files.download('labels.txt')



